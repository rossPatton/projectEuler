/*
https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

@solution 4613732

go run prob-2-fibonacci.go

*/

package main
import (
	"fmt"
	// "reflect"
)

func main() {
	limit := 4000000
	c := make(chan int)

	// original version
	fibzLoop(limit)

	// using channels and goroutines
	go fibzGen(limit, c)
	calcEvensChan(c)
}

// traditional way of doing it
func fibzLoop(limit int) {
	fibz := []int{0,1,1}

	for fibz[len(fibz) - 1] < limit {
		fibz = append(fibz, ( fibz[len(fibz)-1] + fibz[len(fibz)-2] ) )
	}

	calcEvens(fibz)
}

func calcEvens(fibz []int) {
	sum := 0

	for _, val := range fibz {
		if ( val % 2 == 0 ) {
			sum += val
		}
	}

	fmt.Println(sum)
}

func calcEvensChan(c chan int) {
	sum := 0

	for val := range c {
		if ( val % 2 == 0 ) {
			sum += val
		}
	}

	fmt.Println(sum)
}

func fibzGen(limit int, c chan int) {
	fibz := []int{0,1,1}

	for fibz[len(fibz) - 1] < limit {
		fibz = append(fibz, ( fibz[len(fibz)-1] + fibz[len(fibz)-2] ) )
		c <- fibz[len(fibz) - 1]
	}

	close(c)
}
