/*
https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

go run prob-2-fibonacci.go

*/

package main
import "fmt"

var fibs = []int{0,1,1}

/*
	a recursive function would probs be better than a for loop that
	runs an arbitrary amount of times
*/
func main() {
	limit:= 4000000

	for fibs[len(fibs) - 1] < limit {
		fibs = append(fibs, ( fibs[len(fibs)-1] + fibs[len(fibs)-2] ) )
	}

	calcEvens()
}

func calcEvens() {
	length := len(fibs) - 1
	sum := 0

	for length > 0 {
		if fibs[length] % 2 == 0 {
			sum += fibs[length]
		}
		length--
	}

	fmt.Println(sum)
}
